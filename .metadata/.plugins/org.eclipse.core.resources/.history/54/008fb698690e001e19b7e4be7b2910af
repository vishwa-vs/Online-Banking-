package com.banking.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.banking.dto.ListOfTransaction;
import com.banking.model.AccountEntity;
import com.banking.model.BankEntity;
import com.banking.model.TransactionEntity;
import com.banking.repository.AccountRepository;
import com.banking.repository.BankRepository;
import com.banking.repository.TransactionRepository;

import jakarta.persistence.EntityManager;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.transaction.Transactional;

@Service
public class TransactionService {

	@Autowired
	private EntityManager em;
	
	@Autowired
	private TransactionRepository transactionRepository;

	@Autowired
	private AccountRepository accountRepository;

	@Autowired
	private BankRepository bankRepository;

	private static final Logger logger = LoggerFactory.getLogger(TransactionService.class);

	public TransactionEntity transferMoney(String desc, long fromNo, long toNo, int amount) {
	    try {
	        TransactionEntity transaction = new TransactionEntity();
	        AccountEntity fromAccount = accountRepository.findById(fromNo).get();
	        AccountEntity toAccount = accountRepository.findById(toNo).get();

	        BankEntity fromBank = bankRepository.findByAccountNumber(fromAccount.getUser().getBank().getAccountNumber());
	        BankEntity toBank = bankRepository.findByAccountNumber(toAccount.getUser().getBank().getAccountNumber());

	        fromBank.setAccountBalance(fromBank.getAccountBalance() - amount);
	        fromBank.setUpdatedAt(LocalDateTime.now());

	        toBank.setAccountBalance(toBank.getAccountBalance() + amount);
	        toBank.setUpdatedAt(LocalDateTime.now());

	        bankRepository.save(fromBank);
	        bankRepository.save(toBank);

	        transaction.setAmount(amount);
	        transaction.setFromAccount(fromAccount);
	        transaction.setToAccount(toAccount);
	        transaction.setDescription(desc);
	        transaction.setTransactionDate(LocalDateTime.now());

	        return transactionRepository.save(transaction);
	    } catch (Exception e) {
	        logger.error("Error occurred during money transfer: {}", e.getMessage());
	        throw new RuntimeException("Error occurred during money transfer", e);
	    }
	}

	
    @Transactional
	@SuppressWarnings("unchecked")
	public List<ListOfTransaction> listOfTransaction(Integer accNo) {
	    try {
	        //List<TransactionEntity> listOfTransactions = transactionRepository.findByFromAccountNative(accountId);

	        @SuppressWarnings("unchecked")
			List<TransactionEntity> listOfTransactions = transactionRepository.findListofTransaction(accNo);
	        
	        List<ListOfTransaction> transactions = new ArrayList<>();

	        for (TransactionEntity transactionEntity : listOfTransactions) {
	            ListOfTransaction transaction = new ListOfTransaction();
	            transaction.setAmount(transactionEntity.getAmount());
	            transaction.setCreditedTo(transactionEntity.getToAccount().getUser().getBank().getBankName());
	            transaction.setDebitedFrom(transactionEntity.getFromAccount().getUser().getBank().getBankName());
	            transaction.setPaidTo(transactionEntity.getToAccount().getUser().getUserName());
	            transaction.setTransactionTime(transactionEntity.getTransactionDate());

	            transactions.add(transaction);
	        }

	        return transactions;
	    } catch (Exception e) {
	        logger.error("Error occurred while retrieving list of transactions: {}", e.getMessage());
	        throw new RuntimeException("Error occurred while retrieving list of transactions", e);
	    }
	}
    
    
    	public Integer getTotalTransferedMoney() {
	    try {
	        
	        return transactionRepository.findTotalAmount();
	    } catch (Exception e) {
	        logger.error("Error occurred during finding Total Amount: {}", e.getMessage());
	        throw new RuntimeException("Error occurred during finding Total Amount", e);
	    }
    	}
	    
	    public String getTotalTransferedMoneyByJson(int accNo) {
		    try {
		        
		        return transactionRepository.findListofTransactionByjson(accNo);
		    } catch (Exception e) {
		        logger.error("Error occurred during finding Total Amount: {}", e.getMessage());
		        throw new RuntimeException("Error occurred during finding Total Amount", e);
		    }
	}
	    
	    
	    public void getStatement( HttpServletResponse response) {
	
	    	List<TransactionEntity> = transactionRepository.findAll();
	    	
	    	HSSFWorkbook workBoob = new HSSFWorkbook();
	    }
	    
}
